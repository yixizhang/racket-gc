#lang plai/gc2/mutator
(allocator-setup "collector.rkt" 512)
(require "hash.rkt")
(require "list.rkt")
(import-primitives
 identity odd? < +)

(member? 1 '(1 2 3))
(member? '(1) '((1) (2) (3)))
(reverse '())
(reverse '(0))
(reverse '(0 1))
(append '() '())
(append '(0) '())
(append '() '(0))
(append '(0) '(1))
(append '(1) '(0))
(append '(-1) '((0) ((1 2))))
(map (lambda (x) (> x 1))
     '(1 2 3 4))
(map identity '((1)))
(map (λ (x) (add1 x))
     '(1 2 3 4 5))
(filter odd? '(1 2 3 4))
(append '(1) '(2))
(identity '(1 2))
(sort '(3 1 4 2) <)
(sort '((1 . 2) (2 . 1))
      (lambda (a b)
        (< (cdr a) (cdr b))))
(foldr + 0 '(1 2 3))
(memq 2 '(1 2 3 4))
(memf (λ (x)
        (> x 9))
      '(7 8 9 10 11))
(for-each (lambda (x)
            (printf "~s\n" (+ x 1)))
          '(0 1 2 3))
(define (gen-may-contain spec)
  (let ([table (make-hash)])
    (for-each (lambda (def)
                (let ([rhs (rest def)])
                  (for-each (lambda (name) (hash-set! table name rhs))
                            (first def))))
              spec)
    (lambda (name)
      (hash-ref table name (lambda () #f)))))
(define may-contain-anything
  (gen-may-contain empty))
(may-contain-anything '(1))

#lang plai/gc2/mutator
(allocator-setup "coll.rkt" 200)
(define (build-one)
  (let* ((x0 empty)
         (x1
          (lambda (x)
            (if (= x 0)
              x0
              (if (= x 1) x0 (if (= x 2) x0 (if (= x 3) x0 x0))))))
         (x2 (lambda (x) (if (= x 0) x0 x0)))
         (x3 (cons #f #f))
         (x4 (cons #f #f))
         (x5 #f)
         (x6 (cons x4 x2))
         (x7 (cons x4 #f))
         (x8 empty)
         (x9 -1))
    (set-first! x3 x9)
    (set-rest! x3 x8)
    (set-first! x4 x8)
    (set-rest! x4 x9)
    (set-rest! x7 x7)
    x6))
(define (traverse-one x6) (= -1 (rest (first x6))))
(define (trigger-gc n)
  (if (zero? n) 0 (begin (cons n n) (trigger-gc (- n 1)))))
(define (loop i)
  (if (zero? i)
    'passed
    (let ((obj (build-one)))
      (trigger-gc 200)
      (if (traverse-one obj) (loop (- i 1)) 'failed))))
(loop 200)

#lang plai/gc2/mutator
(allocator-setup "coll.rkt" 200)
(define (build-one)
  (let* ((x0 -1)
         (x1 0)
         (x2 (cons #f #f))
         (x3 (lambda (x) (if (= x 0) x2 x1)))
         (x4 #f)
         (x5 (cons #f x2))
         (x6 (cons x5 #f))
         (x7 (cons x5 x2))
         (x8 -1)
         (x9
          (lambda (x)
            (if (= x 0)
              x0
              (if (= x 1) x2 (if (= x 2) x0 (if (= x 3) x1 x6)))))))
    (set-first! x2 x6)
    (set-rest! x2 x8)
    (set-first! x5 x7)
    (set-rest! x6 x9)
    x5))
(define (traverse-one x5) (= -1 (rest (rest (first (first (first x5)))))))
(define (trigger-gc n)
  (if (zero? n) 0 (begin (cons n n) (trigger-gc (- n 1)))))
(define (loop i)
  (if (zero? i)
    'passed
    (let ((obj (build-one)))
      (trigger-gc 200)
      (if (traverse-one obj) (loop (- i 1)) 'failed))))
(loop 200)
